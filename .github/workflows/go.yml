name: build

on:
  push:
    paths-ignore:
      - 'api-tests/**'
    branches:
      - main
      - release-*
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*
  pull_request:

jobs:
  build:
    name: Build

    strategy:
      fail-fast: false
      matrix:
        go:
          - version: 1.16.x
            may-fail: false
          - version: tip
            may-fail: true
        image:
#          - percona/pmm-server:2.0.0 # oldest production version
#          - percona/pmm-server:2.16.0 # version with enabled expirimental repo
#          - percona/pmm-server:2 # latest production version
          - perconalab/pmm-server:dev-latest # latest development version

    continue-on-error: ${{ matrix.go.may-fail }}

    runs-on: ubuntu-latest

    env:
      GOPATH: ${{ github.workspace }}
      WORKING_DIR: ${{ github.workspace }}/src/github.com/percona/pmm-update
#      REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }} # use GITHUB_TOKEN because only it has access to GitHub Checks API
#      CI_REPO_OWNER: percona
#      CI_REPO_NAME: pmm-update

    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
      - name: Checkout code
        uses: percona-platform/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          path: ${{ env.WORKING_DIR }}

      - name: Set up Go release
        if: matrix.go.version != 'tip'
        uses: percona-platform/setup-go@v2
        with:
          go-version: ${{ matrix.go.version }}

      - name: Set up Go tip
        if: matrix.go.version == 'tip'
        run: |
          git clone --depth=1 https://go.googlesource.com/go $HOME/gotip
          cd $HOME/gotip/src
          ./make.bash
          echo "GOROOT=$HOME/gotip" >> $GITHUB_ENV
          echo "$HOME/gotip/bin" >> $GITHUB_PATH

      - name: Enable Go modules cache
        uses: percona-platform/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ matrix.os }}-go-${{ matrix.go-version }}-modules-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ matrix.os }}-go-${{ matrix.go-version }}-modules-

      - name: Docker Up
        run: docker-compose up -d

      - name: Install dev tools in container
        run: docker exec pmm-update-server /root/go/src/github.com/percona/pmm-update/.devcontainer/install-dev-tools.sh

      - name: Run make format and diff
        run: |
          make format
          git status
          git diff --exit-code

      - name: Run check and linters
        run: |
          bin/golangci-lint run -c=.golangci-required.yml --out-format=line-number | env REVIEWDOG_GITHUB_API_TOKEN=${{ secrets.GITHUB_TOKEN }} bin/reviewdog -f=golangci-lint -level=error -reporter=github-pr-check
          bin/golangci-lint run -c=.golangci.yml --out-format=line-number | env REVIEWDOG_GITHUB_API_TOKEN=${{ secrets.GITHUB_TOKEN }} bin/reviewdog -f=golangci-lint -level=error -reporter=github-pr-review

      - name: Run install
        run: docker exec pmm-update-server make -C /root/go/src/github.com/percona/pmm-update install

      - name: Run license check and ansible checks
        run: docker exec pmm-update-server make -C /root/go/src/github.com/percona/pmm-update check

      - name: Run with race detector and collect coverage information
        run: docker exec pmm-update-server make -C /root/go/src/github.com/percona/pmm-update run-race-cover RUN_FLAGS='-debug -check'

      - name: Run codecov
        run: |
          curl https://codecov.io/bash > codecov
          chmod +x codecov
          ./codecov -f cover.out -F cover -X fix
          ./codecov -f *.runcover.out -F runcover -X fix

#  workflow_success:
#    needs: [build]
#    name: Slack Notification success
#    runs-on: ubuntu-latest
#    env:
#      SLACK_WEBHOOK: ${{ secrets.SLACK_TOKEN }}
#      SLACK_CHANNEL: "pmm-ci"
#      SLACK_USERNAME: "PR pipelines bot"
#      SLACK_ICON_EMOJI: ":chestnut:"
#      SLACK_COLOR: "#00FF00"
#      SLACK_TITLE: "Finished ${{ github.event.repository.name }} workflow"
#      SLACK_MESSAGE: "${{ github.event.inputs.repo || github.repository }}:${{ github.event.inputs.branch || github.head_ref }}"
#      SLACK_FOOTER: "Please check the Actions URL ^"
#
#    steps:
#      - uses: percona-platform/checkout@v2
#      - uses: percona-platform/setup-node@v2
#      - name: Slack Notification
#        uses: percona-platform/action-slack-notify@v2
#
#  workflow_failure:
#    if: ${{ failure() }}
#    needs: [build]
#    name: Slack Notification failure
#    runs-on: ubuntu-latest
#    env:
#      SLACK_WEBHOOK: ${{ secrets.SLACK_TOKEN }}
#      SLACK_CHANNEL: "pmm-ci"
#      SLACK_USERNAME: "PR pipelines bot"
#      SLACK_ICON_EMOJI: ":chestnut:"
#      SLACK_COLOR: "#FF0000"
#      SLACK_TITLE: "Finished ${{ github.event.repository.name }} workflow"
#      SLACK_MESSAGE: "Workflow failed: ${{ github.event.inputs.repo || github.repository }}:${{ github.event.inputs.branch || github.head_ref }}"
#      SLACK_FOOTER: "Please check the Actions URL ^"
#
#    steps:
#      - uses: percona-platform/checkout@v2
#      - name: Slack Notification
#        uses: percona-platform/action-slack-notify@v2
